适配器模式把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作。

适配器模式的用途
　　用电器做例子，笔记本电脑的插头一般都是三相的，即除了阳极、阴极外，还有一个地极。而有些地方的电源插座却只有两极，没
       有地极。电源插座与笔记本电脑的电源插头不匹配使得笔记本电脑无法使用。这时候一个三相到两相的转换器（适配器）就能解决
       此问题，而这正像是本模式所做的事情。
       
适配器模式的结构
　　适配器模式有类的适配器模式和对象的适配器模式两种不同的形式。

模式所涉及的角色有：
　　● 目标(Target)角色：这就是所期待得到的接口。注意：由于这里讨论的是类适配器模式，因此目标不可以是类。
　　● 源(Adapted)角色：现在需要适配的接口。
　　● 适配器(Adapter)角色：适配器类是本模式的核心。适配器把源接口转换成目标接口。显然，这一角色不可以是接口，而必须是
	   具体类。
	
类适配器和对象适配器的权衡
	1.类适配器使用对象继承的方式，是静态的定义方式；而对象适配器使用对象组合的方式，是动态组合的方式。
	
	2.对于类适配器，由于适配器直接继承了Adapted，使得适配器不能和Adapted的子类一起工作，因为继承是静态的关系，当适配
	器继承了Adapted后，就不可能再去处理Adapted的子类了。
	
	3.对于对象适配器，一个适配器可以把多种不同的源适配到同一个目标。换言之，同一个适配器可以把源类和它的子类都适配到目
	标接口。因为对象适配器采用的是对象组合的关系，只要对象类型正确，是不是子类都无所谓。
	
	4.对于类适配器，适配器可以重定义Adapted的部分行为，相当于子类覆盖父类的部分实现方法。
	
	5.对于对象适配器，要重定义Adapted的行为比较困难，这种情况下，需要定义Adapted的子类来实现重定义，然后让适配器组合
	子类。虽然重定义Adapted的行为比较困难，但是想要增加一些新的行为则方便的很，而且新增加的行为可同时适用于所有的源。
	
	6.对于类适配器，仅仅引入了一个对象，并不需要额外的引用来间接得到Adapted。
	
	7.对于对象适配器，需要额外的引用来间接得到Adapted。
	
	建议尽量使用对象适配器的实现方式，多用合成/聚合、少用继承。当然，具体问题具体分析，根据需要来选用实现方式，最适合的
	才是最好的。

